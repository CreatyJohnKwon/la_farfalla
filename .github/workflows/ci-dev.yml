name: CI/CD Development

on:
    push:
        branches:
            - dev

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                driver: docker

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            # 'Dockerfile.full'을 사용하여 시크릿 없이 깨끗한 이미지를 빌드합니다.
            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: ./Dockerfile.full
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/lafarfalla:dev
                  no-cache: true

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.AWS_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  echo "Host *" >> ~/.ssh/config
                  echo "  StrictHostKeyChecking no" >> ~/.ssh/config
                  echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config

            # 모든 시크릿을 서버의 임시 스크립트 파일로 안전하게 전송합니다.
            - name: Transfer environment variables to server
              run: |
                ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEV_EC2_PUBLIC_IP }} 'cat > /tmp/env_setup.sh' <<EOF
                export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
                export DOCKERHUB_TOKEN="${{ secrets.DOCKERHUB_TOKEN }}"
                export NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}"
                export NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}"
                export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
                export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
                export NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
                export R2_TOKEN="${{ secrets.R2_TOKEN }}"
                export R2_ACCOUNT_ID="${{ secrets.R2_ACCOUNT_ID }}"
                export R2_ACCESS_KEY_ID="${{ secrets.R2_ACCESS_KEY_ID }}"
                export R2_SECRET_ACCESS_KEY="${{ secrets.R2_SECRET_ACCESS_KEY }}"
                export R2_BUCKET_NAME="${{ secrets.R2_BUCKET_NAME }}"
                export R2_FILE_DOMAIN="${{ secrets.R2_FILE_DOMAIN }}"
                export MONGODB_URI="${{ secrets.MONGODB_URI }}"
                export NEXT_IMAGE_OPTIMIZATION_TIMEOUT="${{ secrets.NEXT_IMAGE_OPTIMIZATION_TIMEOUT }}"
                export SMTP_HOST="${{ secrets.SMTP_HOST }}"
                export SMTP_PORT="${{ secrets.SMTP_PORT }}"
                export SMTP_SECURE="${{ secrets.SMTP_SECURE }}"
                export SMTP_USER="${{ secrets.SMTP_USER }}"
                export SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}"
                export ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"
                export STORE_NAME="${{ secrets.STORE_NAME }}"
                export PORTONE_API_SECRET_KEY="${{ secrets.PORTONE_API_SECRET_KEY }}"
                export TZ="Asia/Seoul"
                EOF
                
                ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEV_EC2_PUBLIC_IP }} "chmod 600 /tmp/env_setup.sh"

            # 원격 서버에서 배포 스크립트를 실행합니다.
            - name: Remote Deploy to Development
              run: |
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.DEV_EC2_PUBLIC_IP }} << 'EOF'
                    DEPLOY_DIR="/home/ec2-user/la_farfalla"
                    
                    echo "🔄 Starting remote deployment to development..."
                    
                    # 1. 임시 파일에서 환경변수 로드
                    source /tmp/env_setup.sh
                    
                    # 2. .env 파일 안전하게 생성 (로그에 출력 안 됨)
                    echo "Creating .env file securely..."
                    {
                      echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}"
                      echo "DOCKERHUB_TOKEN=${DOCKERHUB_TOKEN}" 
                      echo "NAVER_CLIENT_ID=${NAVER_CLIENT_ID}"
                      echo "NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}"
                      echo "KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}"
                      echo "KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}"
                      echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}"
                      echo "R2_TOKEN=${R2_TOKEN}"
                      echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
                      echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
                      echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
                      echo "R2_BUCKET_NAME=${R2_BUCKET_NAME}"
                      echo "R2_FILE_DOMAIN=${R2_FILE_DOMAIN}"
                      echo "MONGODB_URI=${MONGODB_URI}"
                      echo "NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${NEXT_IMAGE_OPTIMIZATION_TIMEOUT}"
                      echo "SMTP_HOST=${SMTP_HOST}"
                      echo "SMTP_PORT=${SMTP_PORT}"
                      echo "SMTP_SECURE=${SMTP_SECURE}"
                      echo "SMTP_USER=${SMTP_USER}"
                      echo "SMTP_PASSWORD=${SMTP_PASSWORD}"
                      echo "ADMIN_EMAIL=${ADMIN_EMAIL}"
                      echo "STORE_NAME=${STORE_NAME}"
                      echo "PORTONE_API_SECRET_KEY=${PORTONE_API_SECRET_KEY}"
                      echo "TZ=${TZ}"
                    } > "$DEPLOY_DIR/.env"

                    chmod 600 "$DEPLOY_DIR/.env"
                    
                    # 3. 사용한 임시 파일 즉시 삭제
                    rm -f /tmp/env_setup.sh
                    
                    # 4. --password-stdin을 사용하여 안전하게 로그인
                    echo "Logging into Docker Hub..."
                    echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                    
                    echo "🚀 Starting Docker containers with new image..."
                    cd "$DEPLOY_DIR"

                    docker-compose down dev-nextjs
                    docker-compose pull dev-nextjs
                    # docker-compose는 .env 파일을 자동으로 읽어 컨테이너에 시크릿을 주입합니다.
                    docker-compose up -d dev-nextjs

                    echo "⏳ Waiting for application to become healthy for 30 seconds..."
                    sleep 30 
                    
                    echo "✅ Wait finished. Assuming application is up."

                    echo "🔄 Reloading nginx configuration..."
                    docker-compose exec nginx nginx -s reload || echo "Nginx reload failed, but continuing..."

                    echo "🧹 Cleaning up unused Docker images..."
                    sudo docker image prune -af

                    echo "📊 Final container status:"
                    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

                    echo "✅ Deployment to development completed successfully!"
                  EOF

            - name: Deployment Status
              if: always()
              run: |
                  if [ ${{ job.status }} == 'success' ]; then
                      echo "✅ Deployment completed successfully!"
                  else
                      echo "❌ Deployment failed. Check logs above."
                      exit 1
                  fi
