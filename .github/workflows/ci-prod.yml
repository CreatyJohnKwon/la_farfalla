name: CI/CD Production

on:
    push:
        branches:
            - main

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile.full
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/lafarfalla:latest

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "$AWS_SSH_KEY" | base64 -d > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  echo "Host *" >> ~/.ssh/config
                  echo "  StrictHostKeyChecking no" >> ~/.ssh/config
                  echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}

            - name: Transfer environment variables to server
              run: |
                  # ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏïàÏ†ÑÌïòÍ≤å ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'SETUP_ENV'
                    touch /tmp/env_setup_prod.sh
                    chmod 600 /tmp/env_setup_prod.sh
                  SETUP_ENV
                  
                  # ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú Ï†ÑÏÜ°
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export DOCKERHUB_USERNAME=\"${{ secrets.DOCKERHUB_USERNAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NAVER_CLIENT_ID=\"${{ secrets.NAVER_CLIENT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NAVER_CLIENT_SECRET=\"${{ secrets.NAVER_CLIENT_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export KAKAO_CLIENT_ID=\"${{ secrets.KAKAO_CLIENT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export KAKAO_CLIENT_SECRET=\"${{ secrets.KAKAO_CLIENT_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXTAUTH_SECRET=\"${{ secrets.NEXTAUTH_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXTAUTH_URL=\"${{ secrets.NEXTAUTH_URL }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_TOKEN=\"${{ secrets.R2_TOKEN }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_ACCOUNT_ID=\"${{ secrets.R2_ACCOUNT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_ACCESS_KEY_ID=\"${{ secrets.R2_ACCESS_KEY_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_SECRET_ACCESS_KEY=\"${{ secrets.R2_SECRET_ACCESS_KEY }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_BUCKET_NAME=\"${{ secrets.R2_BUCKET_NAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_FILE_DOMAIN=\"${{ secrets.R2_FILE_DOMAIN }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export MONGODB_URI=\"${{ secrets.MONGODB_URI }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXT_IMAGE_OPTIMIZATION_TIMEOUT=\"${{ secrets.NEXT_IMAGE_OPTIMIZATION_TIMEOUT }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_HOST=\"${{ secrets.SMTP_HOST }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_PORT=\"${{ secrets.SMTP_PORT }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_SECURE=\"${{ secrets.SMTP_SECURE }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_USER=\"${{ secrets.SMTP_USER }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_PASSWORD=\"${{ secrets.SMTP_PASSWORD }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export ADMIN_EMAIL=\"${{ secrets.ADMIN_EMAIL }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export STORE_NAME=\"${{ secrets.STORE_NAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export PORTONE_API_SECRET_KEY=\"${{ secrets.PORTONE_API_SECRET_KEY }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export TZ=\"Asia/Seoul\"' >> /tmp/env_setup_prod.sh"

            - name: Remote Deploy to Production
              run: |
                  ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 \
                      -i ~/.ssh/id_rsa \
                      ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
                    
                    set -e
                    
                    DEPLOY_DIR="/home/ec2-user/la_farfalla"
                    APP_IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/lafarfalla:latest"
                    
                    echo "üîÑ Starting remote deployment to production..."
                    
                    mkdir -p "$DEPLOY_DIR"
                    cd "$DEPLOY_DIR"
                    
                    source /tmp/env_setup_prod.sh
                    
                    echo "Creating environment file..."
                    {
                      echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}"
                      echo "NAVER_CLIENT_ID=${NAVER_CLIENT_ID}"
                      echo "NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}"
                      echo "KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}"
                      echo "KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}"
                      echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}"
                      echo "NEXTAUTH_URL=${NEXTAUTH_URL}"
                      echo "R2_TOKEN=${R2_TOKEN}"
                      echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
                      echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
                      echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
                      echo "R2_BUCKET_NAME=${R2_BUCKET_NAME}"
                      echo "R2_FILE_DOMAIN=${R2_FILE_DOMAIN}"
                      echo "MONGODB_URI=${MONGODB_URI}"
                      echo "NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${NEXT_IMAGE_OPTIMIZATION_TIMEOUT}"
                      echo "SMTP_HOST=${SMTP_HOST}"
                      echo "SMTP_PORT=${SMTP_PORT}"
                      echo "SMTP_SECURE=${SMTP_SECURE}"
                      echo "SMTP_USER=${SMTP_USER}"
                      echo "SMTP_PASSWORD=${SMTP_PASSWORD}"
                      echo "ADMIN_EMAIL=${ADMIN_EMAIL}"
                      echo "STORE_NAME=${STORE_NAME}"
                      echo "PORTONE_API_SECRET_KEY=${PORTONE_API_SECRET_KEY}"
                      echo "TZ=${TZ}"
                    } > .env

                    chmod 600 .env
                    
                    rm -f /tmp/env_setup_prod.sh
                    
                    echo "üîê Logging into Docker Hub..."
                    echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
                    
                    echo "üì• Pulling latest Docker image..."
                    docker pull "$APP_IMAGE_TAG"

                    echo "üîç Getting the image tag of the currently running container for potential rollback..."
                    PREVIOUS_IMAGE_TAG=$(docker inspect --format='{{.Config.Image}}' $(docker-compose ps -q nextjs) | cut -d':' -f2)

                    if [ -z "$PREVIOUS_IMAGE_TAG" ]; then
                        echo "‚ö†Ô∏è  Could not determine the previous image tag. Rollback might not be possible."
                        PREVIOUS_IMAGE_TAG="latest"
                    fi
                    echo "‚úÖ Previous image tag is: $PREVIOUS_IMAGE_TAG"
                    
                    echo "üöÄ Starting Docker containers..."
                                        docker-compose down dev-nextjs
                    docker-compose pull dev-nextjs
                    docker-compose up -d dev-nextjs

                    echo "‚è≥ Waiting for application to become healthy for 30 seconds..."
                    sleep 30 # 30Ï¥à ÎèôÏïà Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞òÏòÅÏùÑ Í∏∞Îã§Î¶º
                    
                    echo "‚úÖ Wait finished. Assuming application is up."

                    echo "üîÑ Reloading nginx configuration..."
                    docker-compose exec nginx nginx -s reload || echo "Nginx reload failed, but continuing..."

                    echo "üßπ Cleaning up unused Docker images..."
                    sudo docker image prune -af

                    echo "üìä Final container status:"
                    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

                    # --- "ÏÑ±Í≥µ" Î©îÏãúÏßÄÎ•º Ïó¨Í∏∞Î°ú Ïù¥Îèô ---
                    echo "‚úÖ Deployment to production completed successfully!"
                  EOF
                  
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
                  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
                  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
                  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Cleanup
              if: always()
              run: |
                  # Î°úÏª¨ ÌååÏùº Ï†ïÎ¶¨

            - name: Deployment Status
              if: always()
              run: |
                  if [ ${{ job.status }} == 'success' ]; then
                      echo "‚úÖ Production deployment completed successfully!"
                  else
                      echo "‚ùå Production deployment failed. Check logs above."
                      exit 1
                  fi
