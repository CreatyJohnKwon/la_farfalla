name: CI/CD Production

on:
    push:
        branches:
            - main

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4 # v3 -> v4로 업데이트

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3 # v2 -> v3로 업데이트

            - name: Login to Docker Hub
              uses: docker/login-action@v3 # v2 -> v3로 업데이트
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5 # v4 -> v5로 업데이트
              with:
                  context: .
                  file: ./Dockerfile.full
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/lafarfalla:latest
                  # build-args 제거 - 런타임에 환경변수로 처리

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "$AWS_SSH_KEY" | base64 -d > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  echo "Host *" >> ~/.ssh/config
                  echo "  StrictHostKeyChecking no" >> ~/.ssh/config
                  echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}

            - name: Transfer environment variables to server
              run: |
                  # 환경변수를 안전하게 서버로 전송 (로그에 노출되지 않음)
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'SETUP_ENV'
                    # 임시 환경변수 파일 생성 (보안을 위해 600 권한 설정)
                    touch /tmp/env_setup_prod.sh
                    chmod 600 /tmp/env_setup_prod.sh
                  SETUP_ENV
                  
                  # 환경변수를 개별적으로 안전하게 전송
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export DOCKERHUB_USERNAME=\"${{ secrets.DOCKERHUB_USERNAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NAVER_CLIENT_ID=\"${{ secrets.NAVER_CLIENT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NAVER_CLIENT_SECRET=\"${{ secrets.NAVER_CLIENT_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export KAKAO_CLIENT_ID=\"${{ secrets.KAKAO_CLIENT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export KAKAO_CLIENT_SECRET=\"${{ secrets.KAKAO_CLIENT_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXTAUTH_SECRET=\"${{ secrets.NEXTAUTH_SECRET }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXTAUTH_URL=\"${{ secrets.NEXTAUTH_URL }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_TOKEN=\"${{ secrets.R2_TOKEN }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_ACCOUNT_ID=\"${{ secrets.R2_ACCOUNT_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_ACCESS_KEY_ID=\"${{ secrets.R2_ACCESS_KEY_ID }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_SECRET_ACCESS_KEY=\"${{ secrets.R2_SECRET_ACCESS_KEY }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_BUCKET_NAME=\"${{ secrets.R2_BUCKET_NAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export R2_FILE_DOMAIN=\"${{ secrets.R2_FILE_DOMAIN }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export MONGODB_URI=\"${{ secrets.MONGODB_URI }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export NEXT_IMAGE_OPTIMIZATION_TIMEOUT=\"${{ secrets.NEXT_IMAGE_OPTIMIZATION_TIMEOUT }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_HOST=\"${{ secrets.SMTP_HOST }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_PORT=\"${{ secrets.SMTP_PORT }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_SECURE=\"${{ secrets.SMTP_SECURE }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_USER=\"${{ secrets.SMTP_USER }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export SMTP_PASSWORD=\"${{ secrets.SMTP_PASSWORD }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export ADMIN_EMAIL=\"${{ secrets.ADMIN_EMAIL }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export STORE_NAME=\"${{ secrets.STORE_NAME }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export PORTONE_API_SECRET_KEY=\"${{ secrets.PORTONE_API_SECRET_KEY }}\"' >> /tmp/env_setup_prod.sh"
                  ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} \
                    "echo 'export TZ=\"Asia/Seoul\"' >> /tmp/env_setup_prod.sh"

            - name: Remote Deploy to Production
              run: |
                  ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 \
                      -i ~/.ssh/id_rsa \
                      ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
                    
                    set -e  # Exit on any error
                    
                    DEPLOY_DIR="/home/ec2-user/la_farfalla"
                    APP_IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/lafarfalla:latest"
                    
                    echo "🔄 Starting remote deployment to production..."
                    
                    # 배포 디렉토리 생성
                    mkdir -p "$DEPLOY_DIR"
                    cd "$DEPLOY_DIR"
                    
                    # 환경변수 로드 (로그에 출력되지 않음)
                    source /tmp/env_setup_prod.sh
                    
                    # .env 파일 안전하게 생성 (내용이 로그에 출력되지 않음)
                    echo "Creating environment file..."
                    {
                      echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}"
                      echo "NAVER_CLIENT_ID=${NAVER_CLIENT_ID}"
                      echo "NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}"
                      echo "KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}"
                      echo "KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}"
                      echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}"
                      echo "NEXTAUTH_URL=${NEXTAUTH_URL}"
                      echo "R2_TOKEN=${R2_TOKEN}"
                      echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
                      echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
                      echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
                      echo "R2_BUCKET_NAME=${R2_BUCKET_NAME}"
                      echo "R2_FILE_DOMAIN=${R2_FILE_DOMAIN}"
                      echo "MONGODB_URI=${MONGODB_URI}"
                      echo "NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${NEXT_IMAGE_OPTIMIZATION_TIMEOUT}"
                      echo "SMTP_HOST=${SMTP_HOST}"
                      echo "SMTP_PORT=${SMTP_PORT}"
                      echo "SMTP_SECURE=${SMTP_SECURE}"
                      echo "SMTP_USER=${SMTP_USER}"
                      echo "SMTP_PASSWORD=${SMTP_PASSWORD}"
                      echo "ADMIN_EMAIL=${ADMIN_EMAIL}"
                      echo "STORE_NAME=${STORE_NAME}"
                      echo "PORTONE_API_SECRET_KEY=${PORTONE_API_SECRET_KEY}"
                      echo "TZ=${TZ}"
                    } > .env

                    # 파일 권한 설정
                    chmod 600 .env
                    
                    # 임시 파일 삭제
                    rm -f /tmp/env_setup_prod.sh
                    
                    echo "🔐 Logging into Docker Hub..."
                    echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
                    
                    echo "📥 Pulling latest Docker image..."
                    docker pull "$APP_IMAGE_TAG"
                    
                    echo "🚀 Starting Docker containers..."
                    # Production 배포이므로 'nextjs' 서비스만 다루도록 변경
                    # 모든 컨테이너를 한 번에 내린 후, 필요한 서비스만 올리는 것이 안전합니다.
                    docker-compose down # 모든 컨테이너와 네트워크 중지 및 삭제
                    docker-compose up -d nextjs nginx certbot # 'nextjs'와 의존성만 시작
                    
                    echo "⏳ Waiting for containers to start..."
                    sleep 15
                    
                    echo "🔄 Checking nginx status and reloading..."
                    if docker ps --format "table {{.Names}}" | grep -q nginx; then
                        echo "Found nginx container, testing configuration..."
                        if docker exec nginx nginx -t; then
                            echo "Nginx config valid, reloading..."
                            docker exec nginx nginx -s reload || echo "Nginx reload failed, but continuing..."
                        else
                            echo "Nginx config test failed!"
                        fi
                    else
                        echo "Nginx container not found, checking compose services..."
                        docker-compose ps # 특정 서비스만 올렸으므로 모든 서비스를 확인하는 것은 비효율적일 수 있습니다.
                    fi
                    
                    echo "🧹 Cleaning up unused Docker images..."
                    docker image prune -af || true
                    
                    echo "✅ Deployment to production completed successfully!"
                    echo "📊 Container status:"
                    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                    
                    echo "🔍 Service health check:"
                    sleep 5
                    # 'nextjs' 서비스의 포트를 3000으로 가정하고 health check
                    if curl -f http://localhost:3000 > /dev/null 2>&1; then
                        echo "✅ Application is responding on port 3000"
                    else
                        echo "⚠️  Application health check failed"
                    fi
                  EOF
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
                  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
                  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
                  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Cleanup
              if: always()
              run: |
                  # 로컬 파일 정리는 필요없음

            - name: Deployment Status
              if: always()
              run: |
                  if [ ${{ job.status }} == 'success' ]; then
                      echo "✅ Production deployment completed successfully!"
                  else
                      echo "❌ Production deployment failed. Check logs above."
                      exit 1
                  fi
