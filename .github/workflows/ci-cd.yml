name: CI/CD Pipeline

on:
    push:
        branches:
            - main

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "$AWS_SSH_KEY" | base64 -d > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  # SSH 호스트 키 검증 비활성화 (보안상 주의)
                  echo "Host *" >> ~/.ssh/config
                  echo "  StrictHostKeyChecking no" >> ~/.ssh/config
                  echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}

            - name: Create .env.production
              run: |
                  echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env.production
                  echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env.production
                  echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env.production
                  echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env.production
                  echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.production
                  echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env.production
                  echo "R2_TOKEN=${{ secrets.R2_TOKEN }}" >> .env.production
                  echo "R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}" >> .env.production
                  echo "R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}" >> .env.production
                  echo "R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}" >> .env.production
                  echo "R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}" >> .env.production
                  echo "R2_FILE_DOMAIN=${{ secrets.R2_FILE_DOMAIN }}" >> .env.production
                  echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env.production
                  echo "NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${{ secrets.NEXT_IMAGE_OPTIMIZATION_TIMEOUT }}" >> .env.production

            - name: Archive app source (exclude node_modules)
              run: |
                  # 타임스탬프 추가로 고유한 파일명 생성
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  zip -r build-artifact-${TIMESTAMP}.zip . -x "node_modules/*" -x ".git/*" -x ".github/*" -x "*.log"
                  echo "ARTIFACT_NAME=build-artifact-${TIMESTAMP}.zip" >> $GITHUB_ENV

            - name: Upload artifact to EC2
              run: |
                  scp -i ~/.ssh/id_rsa ${{ env.ARTIFACT_NAME }} ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/

            - name: Remote Deploy
              run: |
                  ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 \
                      -i ~/.ssh/id_rsa \
                      ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
                    set -e  # 에러 발생 시 즉시 중단
                    
                    DEPLOY_DIR="la_farfalla"
                    BACKUP_DIR="la_farfalla_backup_$(date +%Y%m%d_%H%M%S)"
                    ARTIFACT_FILE="/home/ec2-user/${{ env.ARTIFACT_NAME }}"
                    
                    echo "🔄 Starting deployment process..."
                    
                    # 1. 기존 컨테이너 중지
                    echo "🛑 Stopping existing containers..."
                    if [ -d "$DEPLOY_DIR" ]; then
                        cd "$DEPLOY_DIR"
                        docker-compose down --remove-orphans || true
                        cd /home/ec2-user
                        # 백업 생성
                        echo "📦 Creating backup..."
                        mv "$DEPLOY_DIR" "$BACKUP_DIR"
                    fi
                    
                    # 2. Docker 시스템 정리
                    echo "🧹 Cleaning Docker system..."
                    docker system prune -af --volumes || true
                    
                    # 3. 새 디렉토리 생성
                    echo "📁 Creating new deployment directory..."
                    mkdir -p "$DEPLOY_DIR"
                    cd "$DEPLOY_DIR"
                    
                    # 4. 아티팩트 압축 해제 (자동 덮어쓰기)
                    echo "📦 Extracting build artifact..."
                    if ! unzip -o -q "$ARTIFACT_FILE"; then
                        echo "❌ Failed to extract build artifact"
                        cd /home/ec2-user
                        rm -rf "$DEPLOY_DIR"
                        if [ -d "$BACKUP_DIR" ]; then
                            echo "🔄 Rolling back to previous version..."
                            mv "$BACKUP_DIR" "$DEPLOY_DIR"
                        fi
                        exit 1
                    fi
                    
                    # 5. 업로드된 아티팩트 파일 삭제
                    rm -f "$ARTIFACT_FILE"
                    
                    # 6. Docker 컨테이너 시작
                    echo "🚀 Starting Docker containers..."
                    if ! docker-compose up -d --build --force-recreate; then
                        echo "❌ Failed to start containers"
                        cd /home/ec2-user
                        rm -rf "$DEPLOY_DIR"
                        if [ -d "$BACKUP_DIR" ]; then
                            echo "🔄 Rolling back to previous version..."
                            mv "$BACKUP_DIR" "$DEPLOY_DIR"
                            cd "$DEPLOY_DIR"
                            docker-compose up -d || true
                        fi
                        exit 1
                    fi
                    
                    # 7. 헬스체크 (선택사항)
                    echo "🏥 Performing health check..."
                    sleep 10
                    if ! docker-compose ps | grep -q "Up"; then
                        echo "⚠️ Warning: Some containers may not be running properly"
                        docker-compose ps
                    else
                        echo "✅ All containers are running"
                    fi
                    
                    # 8. 백업 정리 (성공 시에만)
                    cd /home/ec2-user
                    if [ -d "$BACKUP_DIR" ]; then
                        echo "🗑️ Removing backup (deployment successful)..."
                        rm -rf "$BACKUP_DIR"
                    fi
                    
                    # 9. 오래된 백업 및 로그 정리
                    echo "🧹 Cleaning up old files..."
                    find /home/ec2-user -maxdepth 1 -name "la_farfalla_backup_*" -mtime +3 -exec rm -rf {} \; || true
                    find /home/ec2-user -maxdepth 1 -name "build-artifact*.zip" -mtime +7 -delete || true
                    sudo journalctl --vacuum-time=7d || true
                    
                    echo "✅ Deployment completed successfully!"
                    echo "🌐 Application should be available at: ${{ secrets.NEXTAUTH_URL }}"
                  EOF
              env:
                  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
                  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}

            - name: Deployment Status
              if: always()
              run: |
                  if [ ${{ job.status }} == 'success' ]; then
                      echo "✅ Deployment completed successfully!"
                  else
                      echo "❌ Deployment failed. Check logs above."
                      exit 1
                  fi
