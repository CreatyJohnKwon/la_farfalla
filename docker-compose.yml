version: "3.8"

services:
  # 프로덕션 컨테이너 (lafarfalla.kr)
  nextjs:
    image: ${DOCKERHUB_USERNAME}/lafarfalla:latest
    container_name: nextjs
    restart: always
    working_dir: /app
    environment:
      - NODE_ENV=production
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=https://lafarfalla.kr
      - R2_TOKEN=${R2_TOKEN}
      - R2_ACCOUNT_ID=${R2_ACCOUNT_ID}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_FILE_DOMAIN=${R2_FILE_DOMAIN}
      - MONGODB_URI=${MONGODB_URI}
      - NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${NEXT_IMAGE_OPTIMIZATION_TIMEOUT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - STORE_NAME=${STORE_NAME}
      - PORTONE_API_SECRET_KEY=${PORTONE_API_SECRET_KEY}
    networks:
      - app-network

  # 개발 컨테이너 (dev.lafarfalla.kr)
  dev-nextjs:
    image: ${DOCKERHUB_USERNAME}/lafarfalla:dev
    container_name: dev-nextjs
    restart: always
    working_dir: /app
    environment:
      - NODE_ENV=development
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=https://dev.lafarfalla.kr
      - R2_TOKEN=${R2_TOKEN}
      - R2_ACCOUNT_ID=${R2_ACCOUNT_ID}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_FILE_DOMAIN=${R2_FILE_DOMAIN}
      - MONGODB_URI=${MONGODB_URI}
      - NEXT_IMAGE_OPTIMIZATION_TIMEOUT=${NEXT_IMAGE_OPTIMIZATION_TIMEOUT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - STORE_NAME=${STORE_NAME}
      - PORTONE_API_SECRET_KEY=${PORTONE_API_SECRET_KEY}
    networks:
      - app-network

  # nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 호스트의 nginx.conf 파일을 컨테이너 내부로 마운트 (읽기 전용)
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Certbot 웹루트 챌린지를 위한 경로 (만약 Certbot이 호스트에서 --webroot로 실행되었다면 필요)
      - /var/www/html:/var/www/certbot:ro # Certbot이 호스트의 /var/www/html 에 챌린지 파일을 만들었다면 이 경로를 사용.
      # Certbot SSL 인증서 경로를 호스트에서 직접 마운트 <-- 중요 변경!
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - nextjs
      - dev-nextjs
    networks:
      - app-network

  # SSL 인증서 관리 (Certbot) 컨테이너는 현재 불필요하므로 주석 처리하거나 삭제하는 것을 권장
  # 왜냐하면 Certbot이 이미 호스트에서 실행되어 인증서를 발급했기 때문입니다.
  # 만약 Docker 컨테이너 내에서 Certbot을 완전히 관리하려면 설정을 다시 구성해야 합니다.
  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot-www:/var/www/certbot
  #     - certbot-etc:/etc/letsencrypt
  #   entrypoint: >
  #     /bin/sh -c "trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot; done"

# 이 Named Volumes들은 이제 Nginx 컨테이너에서 사용되지 않으므로 제거합니다.
# Certbot을 컨테이너에서 실행할 경우에만 필요합니다.
# volumes:
#   certbot-www:
#   certbot-etc:

networks:
  app-network:
    driver: bridge
